{
  "_args": [
    [
      "win-spawn@^2.0.0",
      "/Users/Ryan/Desktop/dockerui/node_modules/foreground-child"
    ]
  ],
  "_from": "win-spawn@>=2.0.0 <3.0.0",
  "_id": "win-spawn@2.0.0",
  "_inCache": true,
  "_location": "/win-spawn",
  "_npmUser": {
    "email": "forbes@lindesay.co.uk",
    "name": "forbeslindesay"
  },
  "_npmVersion": "1.2.10",
  "_phantomChildren": {},
  "_requested": {
    "name": "win-spawn",
    "raw": "win-spawn@^2.0.0",
    "rawSpec": "^2.0.0",
    "scope": null,
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/foreground-child"
  ],
  "_resolved": "https://registry.npmjs.org/win-spawn/-/win-spawn-2.0.0.tgz",
  "_shasum": "397a29130ec98d0aa0bc86baa4621393effd0b07",
  "_shrinkwrap": null,
  "_spec": "win-spawn@^2.0.0",
  "_where": "/Users/Ryan/Desktop/dockerui/node_modules/foreground-child",
  "author": {
    "name": "ForbesLindesay"
  },
  "bin": {
    "win-spawn": "./bin/win-spawn"
  },
  "dependencies": {},
  "description": "Spawn for node.js but in a way that works regardless of which OS you're using",
  "devDependencies": {
    "linify": "~1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "397a29130ec98d0aa0bc86baa4621393effd0b07",
    "tarball": "http://registry.npmjs.org/win-spawn/-/win-spawn-2.0.0.tgz"
  },
  "installable": true,
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "name": "win-spawn",
  "optionalDependencies": {},
  "readme": "# win-spawn\n\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\n\n## Installation\n\n  $ npm install win-spawn\n\n## Usage\n\n### Command Line\n\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\n\n    $ win-spawn foo\n    $ win-spawn ./bin/foo\n    $ win-spawn NODE_PATH=./lib foo\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\n\n  You can also transform all the line endings in a directory from `\\r\\n` to `\\n` just by running:\n\n    $ win-line-endings\n\n  You can preview the changes by running:\n\n    $ win-line-endings -p\n\n  It will ignore `node_modules` and `.git` by default, but is not clever enough to recognise binary files yet.\n\n### API\n\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\n\n```javascript\nspawn('foo', [], {stdio: 'inherit'});\nspawn('./bin/foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\n```\n\n![viewcount](https://viewcount.jepso.com/count/ForbesLindesay/win-spawn.png)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/win-spawn.git"
  },
  "scripts": {
    "prepublish": "linify transform bin"
  },
  "version": "2.0.0"
}
